name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Download dependencies
      run: make deps
    
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.56.2
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
    
    - name: Run linter
      run: make lint
    
    - name: Run tests
      run: make test
    
    - name: Run tests with race detection
      run: make test-race
    
    - name: Build binaries for all platforms
      run: make build-all
    
    - name: Set version from tag or input
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
    
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: WAF Guard ${{ steps.version.outputs.VERSION }}
        body: |
          ## WAF Guard ${{ steps.version.outputs.VERSION }}
          
          ### Installation
          
          #### macOS
          ```bash
          # Download and install (Intel)
          curl -L -o wafguard https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/wafguard-darwin-amd64
          chmod +x wafguard
          sudo mv wafguard /usr/local/bin/
          
          # Download and install (Apple Silicon)
          curl -L -o wafguard https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/wafguard-darwin-arm64
          chmod +x wafguard
          sudo mv wafguard /usr/local/bin/
          ```
          
          #### Linux
          ```bash
          # Download and install
          curl -L -o wafguard https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/wafguard-linux-amd64
          chmod +x wafguard
          sudo mv wafguard /usr/local/bin/
          ```
          
          #### Windows
          ```powershell
          # Download the binary
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/wafguard-windows-amd64.exe" -OutFile "wafguard.exe"
          ```
          
          ### Usage
          ```bash
          wafguard --help
          wafguard run test.yaml
          ```
        draft: false
        prerelease: false
    
    - name: Upload Linux binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/wafguard-linux-amd64
        asset_name: wafguard-linux-amd64
        asset_content_type: application/octet-stream
    
    - name: Upload macOS Intel binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/wafguard-darwin-amd64
        asset_name: wafguard-darwin-amd64
        asset_content_type: application/octet-stream
    
    - name: Upload macOS Apple Silicon binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/wafguard-darwin-arm64
        asset_name: wafguard-darwin-arm64
        asset_content_type: application/octet-stream
    
    - name: Upload Windows binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/wafguard-windows-amd64.exe
        asset_name: wafguard-windows-amd64.exe
        asset_content_type: application/octet-stream